name: Prepare Package Releases
run-name: Prepare package releases ${{ github.ref_name }}

on:
  push:
    branches:
      - master
    paths:
      - 'packages/**'
    
jobs:
  prepare-releases:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for Lerna to detect changes

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10'

      - name: Install dependencies
        run: |
          npm ci

      - name: Get changed packages
        id: changed-packages
        run: |
          # Get list of changed packages with their versions
          PACKAGES=$(lerna ls --since origin/master~1 --json | jq -c .)
          echo "Changed packages: $PACKAGES"
          echo "packages=${PACKAGES}" >> $GITHUB_OUTPUT

      - name: Create or update releases
        if: steps.changed-packages.outputs.packages != '[]' && steps.changed-packages.outputs.packages != ''
        run: |
          # Parse the JSON output and create/update releases for each changed package
          echo '${{ steps.changed-packages.outputs.packages }}' | jq -r '.[] | @base64' | while read -r pkg_b64; do
            # Decode package JSON
            pkg=$(echo $pkg_b64 | base64 --decode)
            
            NAME=$(echo $pkg | jq -r '.name')
            VERSION=$(echo $pkg | jq -r '.version')
            LOCATION=$(echo $pkg | jq -r '.location')
            
            # Extract package name without scope
            PACKAGE_NAME=$(echo $NAME | sed 's/^@[^/]*\///')
            
            # Create tag name in the format package1@1.0.0
            TAG_NAME="${PACKAGE_NAME}@${VERSION}"
            
            echo "Processing release for $TAG_NAME"
            
            # Create release notes by getting commits since last tag
            RELEASE_NOTES=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD -- $LOCATION)
            
            if gh release view $TAG_NAME &>/dev/null; then
              echo "Updating existing release $TAG_NAME"
              gh release edit $TAG_NAME \
                --title "$PACKAGE_NAME v$VERSION" \
                --notes "$RELEASE_NOTES" \
                --draft
            else
              echo "Creating new release $TAG_NAME"
              gh release create $TAG_NAME \
                --title "$PACKAGE_NAME v$VERSION" \
                --notes "$RELEASE_NOTES" \
                --draft
            fi

          done

      - name: List created/updated releases
        if: success()
        run: |
          echo "Recently created/updated releases:"
          gh release list --limit 10