name: Version Bump Check

on:
  pull_request:
    branches:
      - master
    paths:
      - 'packages/**'

jobs:
  check-version-bump:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for Lerna to detect changes
          ref: ${{ github.event.pull_request.head.sha }}  # Checkout PR head

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10'

      - name: Install dependencies
        run: |
          npm ci

      - name: Get changed packages
        id: changed-packages
        run: |
          # Get list of changed packages and properly format the output
          PACKAGES=$(lerna ls --since origin/${{ github.base_ref }} --json | jq -c .)
          echo "Changed packages: $PACKAGES"
          echo "packages=${PACKAGES}" >> $GITHUB_OUTPUT

      - name: Check version bumps
        if: steps.changed-packages.outputs.packages != '[]' && steps.changed-packages.outputs.packages != ''
        run: |
          # Function to compare versions
          version_gt() {
            test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
          }

          # Parse the JSON output and check each changed package
          echo '${{ steps.changed-packages.outputs.packages }}' | jq -r '.[] | @base64' | while read -r pkg_b64; do
            # Decode package JSON
            pkg=$(echo $pkg_b64 | base64 --decode)
            
            NAME=$(echo $pkg | jq -r '.name')
            CURRENT_VERSION=$(echo $pkg | jq -r '.version')
            LOCATION=$(echo $pkg | jq -r '.location')
            
            echo "Processing package: $NAME"
            
            # Get the previous version from git history
            if git show origin/${{ github.base_ref }}:$LOCATION/package.json &>/dev/null; then
              PREV_VERSION=$(git show origin/${{ github.base_ref }}:$LOCATION/package.json | jq -r '.version')
              
              echo "Checking $NAME"
              echo "Current version: $CURRENT_VERSION"
              echo "Previous version: $PREV_VERSION"
              
              # Compare versions
              if ! version_gt "$CURRENT_VERSION" "$PREV_VERSION"; then
                echo "::error::Package $NAME has changes but version was not bumped (current: $CURRENT_VERSION, previous: $PREV_VERSION)"
                exit 1
              fi
              
              echo "âœ“ Version bump verified for $NAME ($PREV_VERSION -> $CURRENT_VERSION)"
            else
              echo "New package detected: $NAME with initial version $CURRENT_VERSION"
            fi
          done

      - name: Summary
        if: success()
        run: |
          echo "All changed packages have appropriate version bumps! ðŸŽ‰" 